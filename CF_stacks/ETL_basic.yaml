AWSTemplateFormatVersion: '2010-09-09'
Description: Neornith ETL CloudFormation template

Parameters:
  S3Bucket:
    Type: String
    Description: S3 Bucket name
  
  DBAdmin:
    Type: String
    Description: Database admin username
    AllowedPattern: ^[a-zA-Z][a-zA-Z0-9_]{0,62}$

  DBInstanceIdentifier:
    Type: String
    Description: Database instance identifier
    AllowedPattern: ^[a-z][a-z0-9_]{0,62}$

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS"
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: 16.2
      AllocatedStorage: 20
      MasterUsername: !Sub '{{resolve:secretsmanager:${DBSecret}::username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DBSecret}::password}}'
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups: [!Ref DBSecurityGroup]

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to RDS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0

  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: neornith/ETL/RDS/db_secret
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DBAdmin}"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\\'

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt LambdaExecutionRole.Arn
            Action: s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaRDSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                  - rds:Connect
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: '*'

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: db-query-from-S3
      Handler: db_query_from_s3.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - arm64
      Runtime: python3.12
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: lambdas/db_query_from_s3.zip
      VpcConfig:
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2
        SecurityGroupIds:
          - !Ref LambdaRDSSecurityGroup
          - !Ref LambdaS3SecurityGroup
      Layers:
        - arn:aws:lambda:us-east-1:885527230442:layer:psycopg2:5

  LambdaRDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Lambda access to RDS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref DBSecurityGroup

  LambdaS3SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Lambda Egress
      VpcId: !Ref VPC
      SecurityGroupEgress:
      - DestinationPrefixListId: 'pl-63a5400a'
        IpProtocol: -1

  VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      RouteTableIds:
        - !Ref RouteTable1
        - !Ref RouteTable2
      VpcEndpointType: Gateway

  RouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable1

  RouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable2

